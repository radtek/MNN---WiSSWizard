//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Actemium.WiSSWizard.Support {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class RES_OS_ALL {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RES_OS_ALL() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Actemium.WiSSWizard.Support.RES_OS_ALL", typeof(RES_OS_ALL).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ## ===================================================================== 
        ///## Description : Add a New IIS 7.0 Web Site 
        ///##             : Uses IIS 7.0 PowerShell Provider
        ///## Author      : Man Nguyen
        ///## Date        : 19/06/2012 
        ///## Input       : -siteName 
        ///##               -protocol 
        ///##               -ipAddress 
        ///##               -port 
        ///##               -location
        ///## Output      :  
        ///## Usage       : PS&gt; .\Add-IIS7WebSite -siteName &quot;NewWebsite&quot; -protocol &quot;http&quot; -ipAddress &quot;127.0.0.1&quot; -port 80 -location [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Add_IIS7WebSite {
            get {
                return ResourceManager.GetString("Add-IIS7WebSite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param ($GlobalGroup)
        ///$Domain = &quot;INTRANET.STARREN.NL&quot;
        ///net localgroup &quot;Remote Desktop Users&quot; &quot;$Domain\$GlobalGroup&quot; /Add 
        ///.
        /// </summary>
        internal static string addGroupsToRemoteDesktop {
            get {
                return ResourceManager.GetString("addGroupsToRemoteDesktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($localGroupName, $description)
        ///  
        ///$computerName = &apos;&apos;
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///  
        ///if([ADSI]::Exists(&quot;WinNT://$computerName,computer&quot;)) {  
        ///  
        ///    $computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///  
        ///    $localGroup = $computer.Create(&quot;group&quot;,$localGroupName)  
        ///    $localGroup.SetInfo()  
        ///    $localGroup.description = [string]$description  
        ///    $localGroup.SetInfo()  
        ///}.
        /// </summary>
        internal static string addLocalGroup {
            get {
                return ResourceManager.GetString("addLocalGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($ruleName,$direction,$protocol,$port)
        ///netsh advfirewall firewall add rule name=&quot;$ruleName&quot; dir=&quot;$direction&quot; protocol=&quot;$protocol&quot; localport=&quot;$port&quot; action=allow
        ///.
        /// </summary>
        internal static string AddRuleAdvFirewallPort {
            get {
                return ResourceManager.GetString("AddRuleAdvFirewallPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param ($name,$direction,$programPath)
        ///netsh advfirewall firewall add rule name=&quot;$name&quot; dir=&quot;$direction&quot; program=&quot;$programPath&quot; action=allow.
        /// </summary>
        internal static string AddRuleAdvFirewallProgram {
            get {
                return ResourceManager.GetString("AddRuleAdvFirewallProgram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($FolderPath,$ShareName,$SimultaneousUserLimit,$Description)
        ///$Shares=[WMICLASS]”WIN32_Share”
        ///$Shares.Create(&quot;$FolderPath&quot;,&quot;$ShareName&quot;,0,$SimultaneousUserLimit,$Description)
        ///.
        /// </summary>
        internal static string AddSharedFolder {
            get {
                return ResourceManager.GetString("AddSharedFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($computer=&quot;localhost&quot;, $user,$fullname,$description,$group,$password,$CNL,$PCC,$PNE,$AD)
        ///
        ///#CNL = ChangePwNextLogon
        ///#PCC = PasswordCantBeChanged
        ///#PNE = PasswordNeverExpires
        ///#AD  = AccountDisabled
        ///
        ///$groupCheck
        ///$b = &quot;&lt;none&gt;&quot;
        ///$d = $group.CompareTo($b)
        ///
        ///if($d -ne 0)
        ///{
        ///	$groupCheck = $group
        ///
        ///}
        ///
        ///
        ///
        ///trap [Exception] { 
        ///     # write-host
        ///      #write-error $(&quot;TRAPPED: &quot; + $_.Exception.GetType().FullName); 
        ///      #write-error $(&quot;TRAPPED: &quot; + $_.Exception.Message); 
        ///      continue; 
        ///   }
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string addUser {
            get {
                return ResourceManager.GetString("addUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($computer=&quot;localhost&quot;, $user,$fullname,$description,[string[]]$group,$password)
        ///
        ///$objOu = [ADSI]&quot;WinNT://$computer&quot;
        ///
        ///$objUser = $objOU.Create(&quot;User&quot;, $user)
        ///
        ///$objUser.setpassword($password)
        ///
        ///$objUser.SetInfo()
        ///
        ///$objUser.Description = $description
        ///
        ///$objUser.FullName = $fullname
        ///
        ///$objUser.SetInfo()
        ///
        ///$objuser.userflags = 65536 -bor 64
        ///
        ///$objUser.SetInfo()
        ///
        ///# Creeert een groep als die er nog niet is
        ///$Group = $objOu.Create(&quot;Group&quot;, $group)
        ///
        ///$Group.SetInfo()
        ///
        ///$Group.Description = $gr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string addUser1 {
            get {
                return ResourceManager.GetString("addUser1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($name,$toGroup) 
        ///
        ///$strDomain = &quot;localhost&quot;  
        ///$strComputer = $env:COMPUTERNAME  
        ///
        ///$strUser =  $env:COMPUTERNAME + &quot;/&quot; + $name 
        ///  
        ///$computer = [ADSI](&quot;WinNT://&quot; + $strComputer + &quot;,computer&quot;)  
        ///$group = $computer.psbase.children.find($toGroup)  
        ///
        ///$group.Name  
        ///
        ///function ListAdministrators  
        ///{$members = $group.psbase.invoke(&quot;Members&quot;) | %{$_.GetType().InvokeMember(&quot;Name&quot;,&apos;GetProperty&apos;,$null,$_,$null)}  
        ///$members}  
        ///
        ///   
        ///$group.Add(&quot;WinNT://&quot; + $strDomain + &quot;/&quot; + $strUser)  
        /// 
        ///ListAdmini [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string addUserToGroup {
            get {
                return ResourceManager.GetString("addUserToGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computerName = &apos;&apos; #default localhost
        ///
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///$computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq &apos;user&apos; } | Format-Table Description -autoSize 
        ///
        ///.
        /// </summary>
        internal static string AllLocalUsersDescriptions {
            get {
                return ResourceManager.GetString("AllLocalUsersDescriptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computerName = &apos;&apos; #default localhost
        ///
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///$computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq &apos;user&apos; } | Format-Table Fullname -autoSize 
        ///
        ///.
        /// </summary>
        internal static string AllLocalUsersFullNames {
            get {
                return ResourceManager.GetString("AllLocalUsersFullNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computerName = &apos;&apos; #default localhost
        ///
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///$computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq &apos;user&apos; } | Format-Table Name -autoSize 
        ///
        ///.
        /// </summary>
        internal static string AllLocalUsersNames {
            get {
                return ResourceManager.GetString("AllLocalUsersNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NoDriveTypeAutoRun.
        /// </summary>
        internal static string APRegKeyNoDriveTypeAutoRun {
            get {
                return ResourceManager.GetString("APRegKeyNoDriveTypeAutoRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoAdminLogon.
        /// </summary>
        internal static string AutoAdminLogon {
            get {
                return ResourceManager.GetString("AutoAdminLogon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DefaultDomainName.
        /// </summary>
        internal static string AutoLogonDomainName {
            get {
                return ResourceManager.GetString("AutoLogonDomainName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DefaultPassword.
        /// </summary>
        internal static string AutoLogonPassword {
            get {
                return ResourceManager.GetString("AutoLogonPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.
        /// </summary>
        internal static string AutoLogonRegPath {
            get {
                return ResourceManager.GetString("AutoLogonRegPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DefaultUserName.
        /// </summary>
        internal static string AutoLogonUsername {
            get {
                return ResourceManager.GetString("AutoLogonUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer.
        /// </summary>
        internal static string AutoPlaySettingRegPath {
            get {
                return ResourceManager.GetString("AutoPlaySettingRegPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Get-WMIObject Win32_Group -filter &quot;domain=&apos;INTRANET.STARREN.NL&apos;&quot; | select name.
        /// </summary>
        internal static string checkAllGlobalGroups {
            get {
                return ResourceManager.GetString("checkAllGlobalGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get-WMIObject Win32_Group -filter &quot;domain=&apos;$env:computername&apos;&quot; | select name.
        /// </summary>
        internal static string checkAllLocalGroups {
            get {
                return ResourceManager.GetString("checkAllLocalGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computerName = &apos;&apos; #default localhost
        ///
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///$computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq &apos;user&apos; } | Format-Table Name, Fullname, Description -autoSize 
        ///
        ///.
        /// </summary>
        internal static string checkAllLocalUserInfo {
            get {
                return ResourceManager.GetString("checkAllLocalUserInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computerName = &apos;&apos; #default localhost
        ///
        ///  
        ///if ($computerName -eq &quot;&quot;) {$computerName = &quot;$env:computername&quot;}  
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot;  
        ///$computer.psbase.Children | Where-Object { $_.psbase.schemaclassname -eq &apos;user&apos; } | Format-Table Name -autoSize 
        ///
        ///.
        /// </summary>
        internal static string checkAllLocalUsersNames {
            get {
                return ResourceManager.GetString("checkAllLocalUsersNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	param($RegisterPath, $Keyname, $Value)
        ///
        ///    try
        ///    {
        ///        $exists = Get-ItemProperty $RegisterPath $Keyname -ErrorAction SilentlyContinue
        ///#        Write-Host &quot;Test-RegistryValue: $exists&quot;        
        ///	$str = &quot;=$Value&quot;
        ///
        ///	if ($exists -match $str)
        ///        {
        ///            return $true
        ///        }
        ///        else
        ///        {
        ///            return $false
        ///        }
        ///    }
        ///    catch
        ///    {
        ///        return $false
        ///    }
        ///
        ///
        ///.
        /// </summary>
        internal static string checkRegKeyExist {
            get {
                return ResourceManager.GetString("checkRegKeyExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($ruleName)
        ///netsh advfirewall firewall delete rule name=&quot;$ruleName&quot;.
        /// </summary>
        internal static string DeleteRuleAdvFirewall {
            get {
                return ResourceManager.GetString("DeleteRuleAdvFirewall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Param($UserName)
        ///
        ///$name =&quot;localhost&quot;
        ///
        ///$strComputer = $env:COMPUTERNAME  
        ///
        ///$strUser =  $env:COMPUTERNAME + &quot;/&quot; + $name 
        ///  
        ///$computer = [ADSI](&quot;WinNT://&quot; + $strComputer + &quot;,computer&quot;)  
        ///
        ///$computer.Delete(&quot;user&quot;,$UserName).
        /// </summary>
        internal static string DeleteUser {
            get {
                return ResourceManager.GetString("DeleteUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($localGroupName) 
        ///
        ///
        ///$computerName = &quot;$env:computername&quot; 
        ///
        ///$computer = [ADSI]&quot;WinNT://$computerName,computer&quot; 
        ///$computer.psbase.Children.Remove(&quot;WinNT://$computerName/$localGroupName&quot;)  
        /// 
        ///.
        /// </summary>
        internal static string DeleteUserGroup {
            get {
                return ResourceManager.GetString("DeleteUserGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClassicViewState.
        /// </summary>
        internal static string EMOClassicViewState {
            get {
                return ResourceManager.GetString("EMOClassicViewState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FullPathAddress.
        /// </summary>
        internal static string EMOFullPathAddress {
            get {
                return ResourceManager.GetString("EMOFullPathAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hidden.
        /// </summary>
        internal static string EMOHidden {
            get {
                return ResourceManager.GetString("EMOHidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HideFileExt.
        /// </summary>
        internal static string EMOHideFileExt {
            get {
                return ResourceManager.GetString("EMOHideFileExt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NoNetCrawling.
        /// </summary>
        internal static string EMONoNetCrawling {
            get {
                return ResourceManager.GetString("EMONoNetCrawling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced.
        /// </summary>
        internal static string EMOregPathfolderOptionsAdvanced {
            get {
                return ResourceManager.GetString("EMOregPathfolderOptionsAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\CabinetState.
        /// </summary>
        internal static string EMOregPathfolderOptionsCabinetState {
            get {
                return ResourceManager.GetString("EMOregPathfolderOptionsCabinetState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShowCompColor.
        /// </summary>
        internal static string EMOShowCompColor {
            get {
                return ResourceManager.GetString("EMOShowCompColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShowSuperHidden.
        /// </summary>
        internal static string EMOShowSuperHidden {
            get {
                return ResourceManager.GetString("EMOShowSuperHidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebViewBarricade.
        /// </summary>
        internal static string EMOWebViewBarricade {
            get {
                return ResourceManager.GetString("EMOWebViewBarricade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param($program,$programPath,$pcAnywhere)
        ///#write-host netsh firewall add portopening $protocol $port `&quot;&quot;$program`&quot;&quot; enable
        ///
        ///if($program -eq &quot;RemoteDesktop&quot;)
        ///{
        ///	netsh firewall set service remoteadmin enable
        ///	
        ///}
        ///else
        ///{
        ///	
        ///		if($pcAnywhere -eq &quot;null&quot;)
        ///		{
        ///			netsh firewall add allowedprogram &quot;$programPath&quot; `&quot;&quot;$program`&quot;&quot; enable
        ///		}
        ///		else
        ///		{
        ///			netsh firewall add allowedprogram &quot;$programPath\awhost32.exe&quot; `&quot;&quot;$program`&quot;&quot; enable
        ///		}
        ///}	
        ///
        ///.
        /// </summary>
        internal static string firewallAddException {
            get {
                return ResourceManager.GetString("firewallAddException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param($protocol,$port,$programpath)
        ///netsh firewall add portopening $protocol $port `&quot;&quot;$programpath`&quot;&quot;
        ///.
        /// </summary>
        internal static string firewallAddPortException {
            get {
                return ResourceManager.GetString("firewallAddPortException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to netsh firewall show portopening
        ///
        ///.
        /// </summary>
        internal static string firewallCheckclosedPorts {
            get {
                return ResourceManager.GetString("firewallCheckclosedPorts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to netsh firewall show portopening
        ///.
        /// </summary>
        internal static string firewallCheckCurrentException {
            get {
                return ResourceManager.GetString("firewallCheckCurrentException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to netsh firewall show allowedprogram.
        /// </summary>
        internal static string firewallCheckCurrentExceptionPrograms {
            get {
                return ResourceManager.GetString("firewallCheckCurrentExceptionPrograms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///netsh firewall show state
        ///netsh firewall show allowedprogram
        ///netsh firewall show portopening
        ///
        ///.
        /// </summary>
        internal static string firewallCheckException {
            get {
                return ResourceManager.GetString("firewallCheckException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param($program,$protocol,$port,$programPath)
        ///
        ///
        ///if($program -eq &quot;RemoteDesktop&quot;)
        ///{
        ///	netsh firewall set service remoteadmin disable
        ///	
        ///}
        ///else
        ///{
        ///	if($program -eq &quot;null&quot; -and $programPath -eq &quot;null&quot;)
        ///	{
        ///		
        ///		netsh firewall delete portopening protocol = $protocol port = $port
        ///	}
        ///	if($program -eq &quot;null&quot; -and $protocol -eq &quot;null&quot; -and $port -eq &quot;null&quot;)
        ///	{	
        ///		netsh firewall delete allowedprogram &quot;$programPath&quot;		
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string firewallDeleteException {
            get {
                return ResourceManager.GetString("firewallDeleteException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to netsh advfirewall firewall show rule name=all type=dynamic.
        /// </summary>
        internal static string firewallGetAllCurrentFirewallExceptions {
            get {
                return ResourceManager.GetString("firewallGetAllCurrentFirewallExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($OnOrOff)
        ///
        ///netsh firewall set opmode $OnOrOff.
        /// </summary>
        internal static string firewallTurnOnOff {
            get {
                return ResourceManager.GetString("firewallTurnOnOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run.
        /// </summary>
        internal static string FirstLogonPath {
            get {
                return ResourceManager.GetString("FirstLogonPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dir IIS:\Sites | Format-Table
        ///.
        /// </summary>
        internal static string Get_IIS7AllSiteStatus {
            get {
                return ResourceManager.GetString("Get-IIS7AllSiteStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to get-wmiobject Win32_Share | sort Name | select Name, Path, Description.
        /// </summary>
        internal static string GetAllSharedFolders {
            get {
                return ResourceManager.GetString("GetAllSharedFolders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param ($strUserName)
        ///
        ///$strUser = get-qaduser -SamAccountName $strUserName
        ///$strUser.memberof
        ///.
        /// </summary>
        internal static string getListofGroupInUser {
            get {
                return ResourceManager.GetString("getListofGroupInUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param($Group) 
        ///$group =[ADSI]&quot;WinNT://./$Group&quot; 
        ///$members = @($group.psbase.Invoke(&quot;Members&quot;)) 
        ///$members | foreach {$_.GetType().InvokeMember(&quot;Name&quot;, &apos;GetProperty&apos;, $null, $_, $null)} 
        ///.
        /// </summary>
        internal static string getListofUsersInGroup {
            get {
                return ResourceManager.GetString("getListofUsersInGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #param($Group) 
        ///$group =[ADSI]&quot;WinNT://./Remote Desktop Users&quot; 
        ///$members = @($group.psbase.Invoke(&quot;Members&quot;)) 
        ///$members | foreach {$_.GetType().InvokeMember(&quot;Name&quot;, &apos;GetProperty&apos;, $null, $_, $null)} 
        ///.
        /// </summary>
        internal static string getListOfUsersInRDU {
            get {
                return ResourceManager.GetString("getListOfUsersInRDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($RegisterPath, $Keyname)
        ///
        ///#get-itemproperty -path &quot;$RegisterPath&quot; -name &quot;$Keyname&quot;
        ///
        ///try
        ///   {
        ///        $exists = Get-ItemProperty $RegisterPath $Keyname -ErrorAction SilentlyContinue
        ///        if (($exists -eq $null) -or ($exists.Length -eq 0))
        ///        {
        ///            return $false
        ///	}
        ///        else
        ///        {
        ///            get-itemproperty -path &quot;$RegisterPath&quot; -name &quot;$Keyname&quot;
        ///            return $true
        ///	    
        ///        }
        ///    }
        ///    catch
        ///    {
        ///        return $false
        ///    }.
        /// </summary>
        internal static string GetRegisterKeyValue {
            get {
                return ResourceManager.GetString("GetRegisterKeyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param ($oldRuleName,$newRuleName,$enable,$direction,$protocol,$port,$action)
        ///netsh advfirewall firewall set rule name=&quot;$oldRuleName&quot; new name=&quot;$newRuleName&quot; enable=&quot;$enable&quot; dir=&quot;$direction&quot; protocol=&quot;$protocol&quot; localport=&quot;$port&quot; action=&quot;$action&quot;
        ///.
        /// </summary>
        internal static string ModifyFirewallRule {
            get {
                return ResourceManager.GetString("ModifyFirewallRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param (
        ///		[parameter(Mandatory=$true)]
        ///		[string] $Username,
        ///		[string] $Description,
        ///		[string] $FullName,
        ///		[string] $newPassword,
        ///		[string] $ComputerName = $env:COMPUTERNAME,
        ///		[system.Security.SecureString] $Password,
        ///		[switch] $PasswordChangeAtNextLogon,
        ///		[switch] $CannotChangePassword,
        ///		[switch] $PasswordNeverExpires,
        ///		[switch] $Enable,
        ///		[switch] $Disable,
        ///		[switch] $UnLock,
        ///		[switch] $ResetAllFlags
        ///	)
        ///	try {
        ///		if($newPassword){
        ///		
        ///		$Password = convertto-securestring $newPa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string modifyUser {
            get {
                return ResourceManager.GetString("modifyUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to fDenyTSConnections.
        /// </summary>
        internal static string RemoteDesktopEnableLessSecureRegKey {
            get {
                return ResourceManager.GetString("RemoteDesktopEnableLessSecureRegKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server.
        /// </summary>
        internal static string RemoteDesktopEnableLessSecureRegPath {
            get {
                return ResourceManager.GetString("RemoteDesktopEnableLessSecureRegPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($RegisterPath, $Keyname)
        ///
        ///remove-itemproperty -path $RegisterPath -name $Keyname
        ///.
        /// </summary>
        internal static string RemoveRegisterKey {
            get {
                return ResourceManager.GetString("RemoveRegisterKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param($name,$fromGroup) 
        ///
        ///$strDomain = &quot;localhost&quot;  
        ///$strComputer = $env:COMPUTERNAME  
        ///
        ///$strUser =  $env:COMPUTERNAME + &quot;/&quot; + $name 
        ///  
        ///$computer = [ADSI](&quot;WinNT://&quot; + $strComputer + &quot;,computer&quot;)  
        ///$group = $computer.psbase.children.find($fromGroup)  
        ///
        ///$group.Name  
        ///
        ///function ListAdministrators  
        ///{$members = $group.psbase.invoke(&quot;Members&quot;) | %{$_.GetType().InvokeMember(&quot;Name&quot;,&apos;GetProperty&apos;,$null,$_,$null)}  
        ///$members}  
        ///
        ///   
        ///$group.Remove(&quot;WinNT://&quot; + $strDomain + &quot;/&quot; + $strUser)  
        /// 
        ///L [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string removeUserFromGroup {
            get {
                return ResourceManager.GetString("removeUserFromGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShutdownReasonUI.
        /// </summary>
        internal static string SDEVTRegKeyOnShutdownReasonUI {
            get {
                return ResourceManager.GetString("SDEVTRegKeyOnShutdownReasonUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ShutdownReasonON.
        /// </summary>
        internal static string SDEVTRegKeyShutdownReason {
            get {
                return ResourceManager.GetString("SDEVTRegKeyShutdownReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Reliability.
        /// </summary>
        internal static string SDEVTRegPath {
            get {
                return ResourceManager.GetString("SDEVTRegPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param ($caption)
        ///$adapter = Get-WmiObject &quot;Win32_NetworkAdapterConfiguration&quot; | Where {$_.IPEnabled -eq &quot;TRUE&quot; -and $_.Caption -eq $caption}
        ///$adapter.EnableDHCP()
        ///.
        /// </summary>
        internal static string SetAutoIpAddresses {
            get {
                return ResourceManager.GetString("SetAutoIpAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param($RegisterPath, $Keyname, $Value, $PropertyType)
        ///
        /// try
        ///    {
        ///        $exists = Get-ItemProperty $RegisterPath $Keyname -ErrorAction SilentlyContinue
        ///        if (($exists -eq $null) -or ($exists.Length -eq 0))
        ///        {
        ///            #false
        ///	    New-Item -Path $RegisterPath 
        ///            New-ItemProperty $RegisterPath -Name $Keyname -Value $Value -PropertyType $PropertyType 
        ///            #Set-ItemProperty -path $RegisterPath -name $Keyname -value $Value
        ///        }
        ///        else
        ///        {
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SetRegisterKey {
            get {
                return ResourceManager.GetString("SetRegisterKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param ($DnsServers,$caption)
        ///$adapter = Get-WmiObject &quot;Win32_NetworkAdapterConfiguration&quot; | Where {$_.IPEnabled -eq &quot;TRUE&quot; -and $_.Caption -eq $caption}
        ///$adapter.SetDNSServerSearchOrder($DnsServers)
        ///.
        /// </summary>
        internal static string SetStaticDNSAddresses {
            get {
                return ResourceManager.GetString("SetStaticDNSAddresses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///param ($staticIp,$subnetMask,$gateway,$caption)
        ///
        ///$adapter = Get-WmiObject &quot;Win32_NetworkAdapterConfiguration&quot; | Where {$_.IPEnabled -eq &quot;TRUE&quot; -and $_.Caption -eq $caption}
        ///$adapter.EnableStatic($staticIp,$subnetMask)
        ///$adapter.SetGateways($gateway,[UInt16] 1)
        ///.
        /// </summary>
        internal static string SetStaticIPAddressAndDNS {
            get {
                return ResourceManager.GetString("SetStaticIPAddressAndDNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///$domain = [ADSI]&quot;WinNT://$env:userdomain&quot; 
        ///
        ///$AuditAccountLogonEvent = @{Name=&quot;Audit account logon events&quot;;Expression={&quot;1&quot;}} 
        ///$AuditAccountManagement = @{Name=&quot;Audit account management&quot;;Expression={&quot;2&quot;}} 
        ///$AuditDirSerAccess = @{Name=&quot;Audit directory service access&quot;;Expression={&quot;2&quot;}} 
        ///$AuditLogonEvent = @{Name=&quot;Audit logon event&quot;;Expression={&quot;3&quot;}} 
        ///$AuditObjectAccess = @{Name=&quot;Audit object access&quot;;Expression={&quot;2&quot;}} 
        ///$AuditPolicyChang = @{Name=&quot;Audit policy change&quot;;Expression={&quot;3&quot;}} 
        ///$AuditPrevilegeU [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShowCurrentControlPolicy {
            get {
                return ResourceManager.GetString("ShowCurrentControlPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///$NICs = Get-WmiObject &quot;Win32_NetworkAdapterConfiguration&quot; | Where {$_.IPEnabled -eq &quot;TRUE&quot;}
        ///foreach ($NIC in $NICs)
        ///{ 
        ///&quot;Current configure for $($NIC.Caption)&quot; 
        ///&quot;Current IP address: $($NIC.IpAddress)&quot; 
        ///&quot;Current Subnet mask: $($NIC.IpSubnet)&quot; 
        ///&quot;Default gateway: $($NIC.DefaultIPGateway)&quot;
        ///&quot;&quot; 
        ///&quot;DNS Domain: $($NIC.DNSDomain)&quot;
        ///&quot;DNS Server: $($NIC.DNSServerSearchOrder)&quot;
        ///&quot;-------------------------------------------------------&quot; 
        ///}
        ///.
        /// </summary>
        internal static string ShowCurrentIPSetting {
            get {
                return ResourceManager.GetString("ShowCurrentIPSetting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///$RegExplorer2 = Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\Network
        ///$RegExplorer3 = Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters
        ///&quot;Maximum Password Age : $($RegExplorer3.maximumpasswordage)&quot;
        ///&quot;Minimum Password Length : $($RegExplorer2.MinPwdLen)&quot;
        ///
        ///$domain = [ADSI]&quot;WinNT://$env:userdomain&quot; 
        ///$MinPassLen = @{Name=&quot;Minimum Password Length (Chars)&quot;;Expression={$_.MinPasswordLength}} 
        ///$MinPassAge = @{Name=&quot;Minimum Password Age (Days) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShowCurrentPasswordPolicy {
            get {
                return ResourceManager.GetString("ShowCurrentPasswordPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///$RegExplorer1 =  Get-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced 
        ///$RegExplorer2 =  Get-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\CabinetState 
        ///$RegExplorer3 = Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\Cdrom
        ///&quot;Autoplay is set to : $($RegExplorer3.Autorun)&quot;
        ///&quot;Show the content of system folder is set to : $($RegExplorer1.WebViewBarricade)&quot;
        ///&quot;Display the full path in the address bar is set to : $($RegExplorer2.Fu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShowCurrentWindowsExplorerSettings {
            get {
                return ResourceManager.GetString("ShowCurrentWindowsExplorerSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $service = &quot;IISADMIN&quot; 	#Service to monitor
        ///$b = get-wmiobject win32_service -Filter &quot;Name = &apos;$service&apos;&quot;
        ///	if ($b.state -eq &quot;stopped&quot;)
        ///	{
        ///	$b.startservice()	
        ///	}
        ///
        ///.
        /// </summary>
        internal static string startIISServiceIfStopped {
            get {
                return ResourceManager.GetString("startIISServiceIfStopped", resourceCulture);
            }
        }
    }
}
