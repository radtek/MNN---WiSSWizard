using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Actemium.WiSSWizard
{
    [Serializable]
    public class FireWallException
    {
        public string ExceptionName
        {
            get
            {
                return _exceptionName;
            }
            set
            {
                _exceptionName = value;
            }
        } private string _exceptionName;

        public FireWallException()
        { }
        public FireWallException(string exceptionName)
        {
            _exceptionName = exceptionName;
        }
    }

    public class WindowsFirewall
    {
        //parameters
        private const string CLASSNAME = "WindowsFirewall";

        //constructor
        public WindowsFirewall()
        {

        }
        
        //properties
        public bool FireWallOn
        {
            get
            {
                return _fireWallOn;
            }
            set
            {
                _fireWallOn = value;
            }
        } private bool _fireWallOn = true;
        public List<FireWallException> FireWallExceptions
        {
            get
            {
                return _fireWallExceptions;
            }
            set
            {
                _fireWallExceptions.Clear();
                _fireWallExceptions = value;
            }

        } private List<FireWallException> _fireWallExceptions = new List<FireWallException>();
        public string AddFireWallPort
        {
            set
            {
                _fireWallOwnAddedPorts.Add(value);
            }
        }
        public List<string> GetOwnAddedFireWallPorts
        {
            get
            {
                return _fireWallOwnAddedPorts;
            }
        } private List<string> _fireWallOwnAddedPorts = new List<string>();

        public List<NoDefaultSettingsLog> NoDefaultSettingsLog
        {
            get
            {
                return _noDefaultSettingsLog;
            }
            set
            {
                _noDefaultSettingsLog = value;
            }
        } private List<NoDefaultSettingsLog> _noDefaultSettingsLog = new List<NoDefaultSettingsLog>();
        public NoDefaultSettingsLog AddNoDefaultSettingsToList
        {
            set
            {
                NoDefaultSettingsLog newLog = value;
                foreach (NoDefaultSettingsLog nds in _noDefaultSettingsLog)
                {
                    if (nds.Setting == newLog.Setting)
                    {
                        _noDefaultSettingsLog.Remove(nds);
                        break;
                    }
                }
                _noDefaultSettingsLog.Add(newLog);
            }
        }

        //methods
        public bool CheckFireWallPortisFree(int port, string protocol,ConfigClass configClass)
        {
            bool isFree = true;
            try
            {
                foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallusingPorts())
                {
                    if (protocol == "ALL")
                    {
                        if (str.Contains("UDP") || str.Contains("TCP"))
                        {
                            string[] splitStr = str.Split(' ');
                            if (port == Convert.ToInt32(splitStr[0]))
                            {
                                isFree = false;
                                return isFree;
                            }
                        }
                    }
                    else
                    {
                        if (str.Contains(protocol))
                        {
                            string[] splitStr = str.Split(' ');
                            if (port == Convert.ToInt32(splitStr[0]))
                            {
                                isFree = false;
                                return isFree;
                            }
                        }
                    }
                }
                foreach (string str in _fireWallOwnAddedPorts)
                {
                    if (protocol == "ALL")
                    {
                        if (str.Contains("UDP") || str.Contains("TCP"))
                        {
                            string[] splitStr = str.Split(' ');
                            if (port == Convert.ToInt32(splitStr[0]))
                            {
                                isFree = false;
                                return isFree;
                            }
                        }
                    }
                    else
                    {
                        if (str.Contains(protocol))
                        {
                            string[] splitStr = str.Split(' ');
                            if (port == Convert.ToInt32(splitStr[0]))
                            {
                                isFree = false;
                                return isFree;
                            }
                        }
                    }
                }




                return isFree;
            }
            catch
            {
                return isFree;
            }
        }
        public void ClearListOwnAddedFireWallPorts()
        {
            _fireWallOwnAddedPorts.Clear();
        }

        public void SetFireWall(ConfigClass configClass)
        {
            try
            {
                for (int i = 0; i < _fireWallExceptions.Count; i++)
                {
                    if (_fireWallOn)
                    { configClass.GetScriptHandling.TurnOnOffFireWall("enable"); }
                    else// if (_fireWallExceptions[i].Contains("Firewall uitgeschakeld"))
                    { configClass.GetScriptHandling.TurnOnOffFireWall("disable"); break; }

                    if (_fireWallExceptions[i].ExceptionName == "PcAnywhere")
                    {
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("Remote Desktop"))
                    {
                        configClass.GetScriptHandling.AddExeceptionFirewall("RemoteDesktop", "null", "null", "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("FTP Server"))
                    {
                        configClass.GetScriptHandling.AddExeceptionFirewall("FTPServer", "TCP", "21", "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("Web Server http -protocol"))
                    {
                        configClass.GetScriptHandling.AddExeceptionFirewall("WebServerhttp", "TCP", "80", "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("Web Server https -protocol"))
                    {
                        configClass.GetScriptHandling.AddExeceptionFirewall("WebServerhttps", "TCP", "443", "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("SQL Server"))
                    {
                        configClass.GetScriptHandling.AddExeceptionFirewall("SQLserver", "TCP", "1433", "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("Uitzondering") && _fireWallExceptions[i].ExceptionName.Contains("Poortnr.:") && _fireWallExceptions[i].ExceptionName.Contains("Protocol"))
                    {
                        string[] split = _fireWallExceptions[i].ExceptionName.Split(' ');
                        string name = "";
                        string port = "";
                        string protocol = "";

                        for (int j = 0; j < split.Length; j++)
                        {
                            if (split[j].Contains("Uitzondering"))
                            {
                                j++;
                                for (int k = 0; k < split.Length; k++)
                                {
                                    if (split[j + k] != "Poortnr.:")
                                    {
                                        name = name + split[j + k] + " ";
                                    }
                                    else
                                    {
                                        break;
                                    }

                                }
                            }
                            if (split[j].Contains("Poortnr.:"))
                            {
                                port = split[j + 1];
                            }
                            if (split[j].Contains("Protocol"))
                            {
                                protocol = split[j + 2];
                            }

                        }
                        configClass.GetScriptHandling.AddExeceptionFirewall(name, protocol, port, "null", "null");
                    }
                    if (_fireWallExceptions[i].ExceptionName.Contains("Executable Path:"))
                    {
                        string name = "";
                        string programPath = _fireWallExceptions[i].ExceptionName.Remove(0, 17);
                        string[] split = _fireWallExceptions[i].ExceptionName.Split('\\');
                        name = split[split.Length - 1];
                        name = name.Replace(" ", "");
                        programPath = "\"" + programPath + "\"";
                        configClass.GetScriptHandling.AddExeceptionFirewall(name, "null", "null", programPath, "null");
                    }
                }
            }
            catch (Exception ex)
            {
                Actemium.Diagnostics.Trace.WriteError("({0})", "Set firewall", CLASSNAME, ex);
                configClass.ErrorList.Add(new ConfigErrors(CLASSNAME, "Set firewall", ex.Message));

            }
        }
        public bool CheckFirewallExeceptions(ConfigClass configClass)
        {
            bool totalcheck = true;
            try
            {
              configClass.GetScriptHandling.putAllLocalFireWallExceptionsToList();
                List<bool> check = new List<bool>();

                foreach (FireWallException exeptions in _fireWallExceptions)
                {
                    #region firewallEnabledOrDisabled
                    if (exeptions.ExceptionName.Contains("Firewall ingeschakeld"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("Operationele modus") && str.Contains("Inschakelen"))
                            {
                                chk = true;
                                break;
                            }
                            else if (str.Contains("Operational mode") && str.Contains("Enable"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion firewallEnabledOrDisabled
                    #region RemoteEnabledOrDisabled
                    if (exeptions.ExceptionName.Contains("Remote Desktop"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("Extern-beheermodus") && str.Contains("Inschakelen"))
                            {
                                chk = true;
                                break;
                            }
                            else if (str.Contains("Remote admin mode") && str.Contains("Enable"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }

                    #endregion RemoteEnabledOrDisabled
                    #region FTP Server
                    if (exeptions.ExceptionName.Contains("FTP Server"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("21") && str.Contains("TCP"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion FTP Server
                    #region Web Server http -protocol
                    if (exeptions.ExceptionName.Contains("Web Server http -protocol"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("80") && str.Contains("TCP"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion Web Server http -protocol
                    #region Web Server https -protocol
                    if (exeptions.ExceptionName.Contains("Web Server http -protocol"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("443") && str.Contains("TCP"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion Web Server https -protocol
                    #region SQL Server
                    if (exeptions.ExceptionName.Contains("SQL Server"))
                    {
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains("1433") && str.Contains("TCP"))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion SQL Server
                    #region own added port

                    if (exeptions.ExceptionName.Contains("Uitzondering") && exeptions.ExceptionName.Contains("Protocol"))
                    {
                        string[] split = exeptions.ExceptionName.Split(' ');
                        string name = "";
                        string port = "";
                        string protocol = "";

                        for (int j = 0; j < split.Length; j++)
                        {
                            if (split[j].Contains("Uitzondering"))
                            {
                                j++;
                                for (int k = 0; k < split.Length; k++)
                                {
                                    if (split[j + k] != "Poortnr.:")
                                    {
                                        name = name + split[j + k] + " ";
                                    }
                                    else
                                    {
                                        break;
                                    }

                                }
                            }
                            if (split[j].Contains("Poortnr.:"))
                            {
                                port = split[j + 1];
                            }
                            if (split[j].Contains("Protocol"))
                            {
                                protocol = split[j + 2];
                            }
                        }
                        bool chk = false;

                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains(port) && str.Contains(protocol))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);

                    }
                    #endregion own added port
                    #region added Executable
                    if (exeptions.ExceptionName.Contains("Executable Path:"))
                    {
                        string[] split = exeptions.ExceptionName.Split('\\');
                        string exec = split[split.Length - 1];
                        bool chk = false;
                        foreach (string str in configClass.GetScriptHandling.GetAllLocalFirewallExceptions)
                        {

                            if (str.Contains(exec))
                            {
                                chk = true;
                                break;
                            }
                            else
                            {
                                chk = false;
                            }
                        }
                        check.Add(chk);
                    }
                    #endregion added Executable

                }

                foreach (bool b in check)
                {

                    if (!b)
                    {
                        totalcheck = false;
                        return totalcheck;
                    }
                }


            }
            catch (Exception ex)
            {
                Actemium.Diagnostics.Trace.WriteError("({0})", "Set firewall", CLASSNAME, ex);
               configClass.ErrorList.Add(new ConfigErrors(CLASSNAME, "Set firewall", ex.Message));

            }
            return totalcheck;
        }

    }
}
